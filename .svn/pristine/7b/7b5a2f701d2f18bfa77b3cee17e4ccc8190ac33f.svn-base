package graph;

/* See restrictions in Graph.java. */

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Stack;

/** The shortest paths through an edge-weighted graph.
 *  By overrriding methods getWeight, setWeight, getPredecessor, and
 *  setPredecessor, the client can determine how to represent the weighting
 *  and the search results.  By overriding estimatedDistance, clients
 *  can search for paths to specific destinations using A* search.
 *  @author ClarkChen
 *  Discussed with Rachel Zhang
 */
public abstract class ShortestPaths {


	/* I made a ShortestPathsTraversal class in
	 * ShortestPaths that uses a PriorityQueue for
	 * the fringe and overrides the visit() method according to the pseudocode
	 *  in DSIJ for single-source shortest paths. The problem is that the PriorityQueue
	 *  needs to be ordered by the current weight of the vertex, not the integer representation
	 *  of the vertex itself. So I thought to override the default Comparator for PriorityQueue,
	 *  but that entails overriding the public method compare() in Comparator, and we can't
	 *  add any public members per the restrictions in Graph. So I'm a bit confused on how
	 *   to go about handling the fringe as a PriorityQueue in ShortestPaths.
	 *   Perhaps a LabeledGraph is appropriate for this situation?
	 */

	/*why not create a new data type (in the form of a nested class in ShortestPaths) that:
	has both a key (the vertex number) and a value (the distance) -- I don't know if that terminology
 	holds in this situation, but bear with me. Has a compareTo method that overrides
  	Comparable's method (I forgot that this class will have to implement
   	comparable which shouldn't be a problem I don't think with regard
   	to the restriction on additional public classes since it's nested
   	in the private class which should be OKWithHilfy.jpg since this data
   	structure isn't explicitly declared public -- i.e. I think we should
    be able to still implement comparable), and in this method, it just
    returns the compareTo of the respective Integers (capital I not primitive int) denoting the
    distances. If I'm not mistaken, this way, the priority queue will sort by the
    distnaces, but you are still able to access this data structure's stored vertex
    values so you can still set the values in whatever data structure you are using
    to represent parent vertices. */

	/** Distance based comparator to be used by DistanceQueue. */
	private class DistanceComparator implements Comparator<Integer> {
		@Override
		/** This is the foundation of the distance queue. */

		public int compare(Integer v1, Integer v2) {
			// TODO Auto-generated method stub
			double weight1 = getWeight(v1) + estimatedDistance(v1);//getWeight(source, v1) + heuristic from (v1 to destination)
			double weight2 = getWeight(v2) + estimatedDistance(v1);

			if (weight1 > weight2) {
				return 1;
			} else if (weight1 < weight2) {
				return -1;
			} else {
				return 0;
			}
		}
	}


	private class ShortestPathX extends Traversal{
		/** DistanceQueue is just a Priority Queue constructed with a unique Comparator. */

		protected ShortestPathX(Graph G) {
			super(G, new LinkedList<Integer>());//NOTE: THIS FRINGE DOESN'T HAVE COMPARATOR YET
			_G = G;
			//Fringe should be linked list (so we can re-sort at will upon performing A* removal)

			//fringe = new LinkedList<Integer>();
			//fringe.addAll(_fringe);

			//hashMap should contain all the Vertices in the fringe with current known weights

			//initially all vertices (apart from source) have unknown distances to _dest (infinity)
			//WHERE DO I DO THIS? (maybe I override Traverse??)
		}
		//new traversal such that when a successor is "processed", DQ is given the information
		//about any distance updates, which it requires in order to be able to remove() items
		//in the right order

		@Override
		protected boolean processSuccessor(int u, int v) {//DSIJ SAYS: NEED_PROCESSING ALWAYS FALSE
			return false;
		}

		@Override
		protected boolean marked(int v) {//DSIJ SAYS TRIVIAL: RETURN FALSE
			return false;
		}

		@Override
		protected void mark(int v) {//DSIJ SAYS TRIVIAL: DO NOTHING
			return;
		}

		//visited = processed
		protected boolean visit(int v) {//DSIJ SAYS:A* VISIT(v): [Single destination] If v is the destination node,
			//exit the algorithm. Otherwise,
			//for each edge (v,w) with weight n, if dist[w] > n + dist[v], set dist[w]
			//to n + dist[v] and set parent[w] to v. Reorder fringe as needed.

			if (v == getDest()) {
				//exit the algorithm
				return false;//returning false will end the traverse method (in traversal)
			}
				//for each edge (v,w) with weight n, if dist[w] > n + dist[v], set dist[w] (doesn't use heuristic)
				//to n + dist[v] and set parent[w] to v. Reorder fringe as needed. THIS IS HARD.
					//how do you give the queue information about WEIGHTS?
			DistanceComparator dc = new DistanceComparator();
			for (int w : _G.successors(v)) {//for each edge (successor) of vertex V
				double weightN = getWeight(v, w);
				if (getWeight(w) > (weightN + getWeight(v))) {//where getWeight(w) is what I know so far
					setWeight(w, weightN + getWeight(v));//where getWeight(v) is weight of vertex v from source
					setPredecessor(w, v);//set parent of w to v
				}
			}

			//Reorder fringe as needed...
				//sort(List<T> list, Comparator<? super T> c)
			Collections.sort((LinkedList<Integer>)_fringe, dc);
			return true;
		}
		/** Private variables. */
		private Graph _G;
	}

    /** The shortest paths in G from SOURCE. */
    public ShortestPaths(Graph G, int source) {
        this(G, source, 0);
    }

    /** A shortest path in G from SOURCE to DEST. */
    public ShortestPaths(Graph G, int source, int dest) {
        _G = G;
        _source = source;
        _dest = dest;
        // FIXME
        shortestPath = new ArrayList<Integer>();
    }

    /** Initialize the shortest paths.  Must be called before using
     *  getWeight, getPredecessor, and pathTo. */
    public void setPaths() {
        // FIXME
    	//Initialize the shortest paths --> sounds like Dijkstra's
    	//It's been said:
    	//setPaths is to: update priority queue, update hashMap

    	/* basically, I have mine set up so that calling setPaths()
    	 * initializes your data structures for making paths,
    	 * and then actually traverses. -Ross T.
    	 */

    	/* setPaths just find all the paths from _source to the rest
    	 * of the vertices (if you don't have a destination),
    	 * but if you do have a destination then the algorithm is
    	 * supposed to stop once you get there.
    	 * it uses that traversal classes traverse method
    	 * -Patrick H.
    	 */

    	//(Static void set paths)
	    	//set weight of source to 0
	    	//set predecessors to -1
	    	//set weights of others to infinity
    	//Then call traverse(Collection of vertices)

    	/**
    	 * Start by intializing distances and predecessors to base condition (infinity and -1).
    	 * Create object A* traversal.
    	 * Traverse (should traverse the shortest path)
    	 * */
    	for (int v : _G.vertices()) {//initial fringe
    		setPredecessor(v, 0);//default all predecessors to 0
    		if (v == this._source) {
    			setWeight(v, 0);
    		} else {
    			setWeight(v, Double.POSITIVE_INFINITY);
    		}
    	}
    	//TRAVERSE (make sure to put in a collection of vertices)
    	ArrayList<Integer> vertices = new ArrayList<Integer>();
    	for (int i : _G.vertices()) {//initial fringe
    		vertices.add(i);
    	}
    	ShortestPathX spTraversal = new ShortestPathX(_G);
    	spTraversal.traverse(vertices);
    }

    /** Returns the starting vertex. */
    public int getSource() {
        // FIXME
        return _source;
    }

    /** Returns the target vertex, or 0 if there is none. */
    public int getDest() {
        // FIXME
        return _dest;
    }

    /** Returns the current weight of vertex V in the graph.  If V is
     *  not in the graph, returns positive infinity. */
    public abstract double getWeight(int v);

    /** Set getWeight(V) to W. Assumes V is in the graph. */
    protected abstract void setWeight(int v, double w);

    /** Returns the current predecessor vertex of vertex V in the graph, or 0 if
     *  V is not in the graph or has no predecessor. */
    public abstract int getPredecessor(int v);

    /** Set getPredecessor(V) to U. */
    protected abstract void setPredecessor(int v, int u);

    /** Returns an estimated heuristic weight of the shortest path from vertex
     *  V to the destination vertex (if any).  This is assumed to be less
     *  than the actual weight, and is 0 by default. */
    protected double estimatedDistance(int v) {
        return 0.0;
    }

    /** Returns the current weight of edge (U, V) in the graph.  If (U, V) is
     *  not in the graph, returns positive infinity. */
    protected abstract double getWeight(int u, int v);

    /** Returns a list of vertices starting at _source and ending
     *  at V that represents a shortest path to V.  Invalid if there is a
     *  destination vertex other than V. */
    public List<Integer> pathTo(int v) {
        // FIXME

    	//this.setPaths(); ASSUME SETPATHS() IS CALLED BEFORE --> traversal happened

    	Stack<Integer> temp = new Stack<Integer>();
    	int x = _dest;//starts at end
    	temp.push(x);
    	while (x != _source) {
    		int curr = getPredecessor(x);
    		temp.push(curr);
    		x = curr;
    	}
    	while (!temp.isEmpty()) {//pop off stack, add to shortestPath (reverse)
    		shortestPath.add(temp.pop());
    	}
        return shortestPath;
        //x = 3 push 3, x = 3 curr = 2 push 2, x = getPredecessor(3) = 2, (x = 2 != source)
        //curr = getPredecessor(x = 2) = 4 temp.push(4) x = getPredecessor(2) = 4, 4 == _source == 4
    }

    /** Returns a list of vertices starting at the source and ending at the
     *  destination vertex. Invalid if the destination is not specified. */
    public List<Integer> pathTo() {
        return pathTo(getDest());
    }

    // FIXME

    /** The graph being searched. */
    protected final Graph _G;
    /** The starting vertex. */
    private final int _source;
    /** The target vertex. */
    private final int _dest;
    // FIXME
    private List<Integer> shortestPath;



    /** Consider moving distanceMap to SimpleShortestPath*/
    //need to perform a traversal

    //Data Structures:
    //hashMap

}
