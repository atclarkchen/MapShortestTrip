package make;

import java.util.ArrayList;
import java.util.List;

import static make.Main.error;

/** Represents the rules concerning a single target in a makefile.
 *  @author P. N. Hilfinger
 */
class Rule {
    /** A new Rule for TARGET. Adds corresponding vertex to MAKER's dependence
     *  graph. */
    Rule(Maker maker, String target) {
        _maker = maker;
        _depends = _maker.getGraph();//maker's dependence graph
        _target = target;
        _vertex = _depends.add(this);
        _time = _maker.getInitialAge(target);
        _finished = false;
    }

    /** Add the target of DEPENDENT to my dependencies. */
    void addDependency(Rule dependent) {
        // FILL IN

    	//Basically adding an edge from my target to dependent's target
    	//but what does a target look like in a graph? _Vertex corresponds to a target!

    	//something "depends" on another as long as they have a connecting edge in _depends graph

    	_depends.add(this._vertex, dependent._vertex);
    }

    /** Add COMMANDS to my command set.  Signals IllegalStateException if
     *  COMMANDS is non-empty, but I already have a non-empty command set.
     */
    void addCommands(List<String> commands) {
        // FILL IN
    	if (!commands.isEmpty() && !this._commands.isEmpty()) {
    		throw new IllegalStateException();
    	}
    	_commands.addAll(commands);
    }

    /** Return the vertex representing me. */
    int getVertex() {
        return _vertex;
    }

    /** Return my target. */
    String getTarget() {
        return _target;
    }

    /** Return my target's current change time. */
    Integer getTime() {
        return _time;
    }

    /** Return true iff I have not yet been brought up to date. */
    boolean isUnfinished() {
        return !_finished;
    }

    /** Check that dependencies are in fact built before it's time to rebuild
     *  a node. */
    private void checkFinishedDependencies() {
        // FILL IN
    	//check all of my dependencies and that they are built
    		//what does it mean to be built?
    		//iterate through all my dependencies (all successors)
    		//this is not a boolean, do I rebuild all of my dependencies if they aren't built?

    	for (int v : _depends.successors(_vertex)) {
    		Rule r = _depends.getLabel(v);
    		if (r.isUnfinished()) {//where finished means it is "up to date"
    			throw new Error("Dependencies contain unfinished rules!");
    		}
    	}
    }

    /** Return true iff I am out of date and need to be rebuilt (including the
     *  case where I do not exist).  Assumes that my dependencies are all
     *  successfully rebuilt. */
    private boolean outOfDate() {
        // FILL IN

    	//do i "exist"? (do I have a non-null time?)
    	if (getTime() == null) {
    		return true;
    	}
        //if any one of my dependencies times are greater than my time, I am out of date
    	//ALSO since I assume my dependencies are all rebuilt, that means that all my dependencies
    		//have a non-null TIME
    	for (int v : this._depends.successors(_vertex)) {
    		if (_depends.getLabel(v).getTime() > getTime()) {
    			return true;
    		}
    	}//My time has to be greater than ALL of my dependencies!
        return false;
    }

    /** Rebuild me, if needed, after checking that all dependencies are rebuilt
     *  (error otherwise). */
    void rebuild() {
        checkFinishedDependencies();//will error if dependencies are not rebuilt

        if (outOfDate()) {//checks that T i
            if (_commands.isEmpty()) {
                error("%s needs to be rebuilt, but has no commands",
                      _target);
            }
            // FILL IN
            //Otherwise: executes the commands set from the non-empty rule
            //execute just means printing them verbatim

            for (String s : _commands) {
            	System.out.println(s);
            }
            //set creation time of T to be larger than that of any existing object (make T youngest)
            _time = _maker.getCurrentTime();
        }
        _finished = true;
    }

    /** The Maker that created me. */
    private Maker _maker;
    /** The Maker's dependency graph. */
    private Depends _depends;
    /** My target. */
    private String _target;
    /** The vertex corresponding to my target. */
    private int _vertex;
    /** My command list. */
    private ArrayList<String> _commands = new ArrayList<>();
    /** True iff I have been brought up to date. */
    private boolean _finished;
    /** My change time, or null if I don't exist. */
    private Integer _time;
}
