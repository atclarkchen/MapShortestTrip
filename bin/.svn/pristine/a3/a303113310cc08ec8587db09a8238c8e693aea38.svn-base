package graph;

/* See restrictions in Graph.java. */

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashSet;
import java.util.Queue;

/** Implements a generalized traversal of a graph.  At any given time,
 *  there is a particular collection of untraversed vertices---the "fringe."
 *  Traversal consists of repeatedly removing an untraversed vertex
 *  from the fringe, visting it, and then adding its untraversed
 *  successors to the fringe.
 *
 *  Generally, the client will extend Traversal.  By overriding the visit
 *  method, the client can determine what happens when a node is visited.
 *  By supplying an appropriate type of Queue object to the constructor,
 *  the client can control the behavior of the fringe. By overriding the
 *  shouldPostVisit and postVisit methods, the client can arrange for
 *  post-visits of a node (as in depth-first search).  By overriding
 *  the reverseSuccessors and processSuccessor methods, the client can control
 *  the addition of neighbor vertices to the fringe when a vertex is visited.
 *
 *  Traversals may be interrupted or restarted, remembering the previously
 *  marked vertices.
 *  @author ClarkChen
 */

/**
 * This is a general implementation that should be used for (extended)
 * by DFS and BFS.
 *1. Overriding visit method: client can determine what "visit" does
 *2. DFS and BFS classes supply a "different Queue object in constructor" (nudge nudge: stack vs. queue)
 *3. Overriding post-visits (as in DFS), client can arrange for post-visits of a node.
 *Overriding reverseSuccessors and processSucessor methods, client can
 *control addition of neighbor vertices to fringe when visiting a vertex
 */
public abstract class Traversal {

    /** A Traversal of G, using FRINGE as the fringe. */
    protected Traversal(Graph G, Queue<Integer> fringe) {
        _G = G;
        _fringe = fringe;
    }

    /** Unmark all vertices in the graph. */
    public void clear() {
        // FIXME
    	_visited.clear();
    }

    /** Initialize the fringe to V0 and perform a traversal. */
    public void traverse(Collection<Integer> V0) {
        // FIXME

    	//make sure to implement traverse in terms of the VARIOUS protected methods that are
    	//to be overridden by clients (e.g. processSuccessor)

    	_visited = new ArrayList<Integer>();

    	//initialize the fringe
    	_fringe.addAll(V0);

    	//treat visit is processing (visit is when you first process a vertex)
    	//post-visit (all the children have been visited and have been post-visited)

    	while (!_fringe.isEmpty()) {
    		int v = _fringe.remove();
    		if (!marked(v)) {//marked means it has been visited
    			mark(v);
    			if (visit(v) == false) {//visit(v) --> if false, end traversal immediately.
    				return;
    			}

    			//iterate through all edges and ADD UNPROCESSED SUCCESSORS TO FRINGE

    			//if should Post Visit, reAdd to fringe (stack)
    			if (this.shouldPostVisit(v)) {
    				//reADD v to Stack
    				_fringe.add(v);
    			}
    			//always add successors
    			for (int successor : _G.successors(v)) {//for each edge v--> w (checks if "w" is unmarked)
    				if (this.processSuccessor(v, successor)) {//if (needs_processing) --> returns true if successor in unmarked
    					//Add w to fringe
    					_fringe.add(successor);
    				}
    			}
    		} else {//"v" was already marked! (meaning that we've come across vertex that we want to post visit! we re-added this vertex)
    			postVisit(v);
    		}
    	}
    }

    /** Initialize the fringe to { V0 } and perform a traversal. */
    public void traverse(int v0) {
        traverse(Arrays.<Integer>asList(v0));
    }

    /** Returns true iff V has been marked. */
    protected boolean marked(int v) {
        // FIXME
    	if (_visited == null) {
    		return false;
    	}
    	if (_visited.contains(v)) {
    		return true;
    	}
    	return false;
    }

    /** Mark vertex V. */
    protected void mark(int v) {
        // FIXME
    	_visited.add(v);//add to _visited (visiting comes immediately after marking)
    }

    /** Perform a visit on vertex V.  Returns false iff the traversal is to
     *  terminate immediately. */
    protected boolean visit(int v) {
        return true;
    }

    /** Return true if we should postVisit V after traversing its
     *  successors.  (Post-visiting generally is useful only for depth-first
     *  traversals, although we define it for all traversals.) */
    protected boolean shouldPostVisit(int v) {
        return false;
    }

    /** Revisit vertex V after traversing its successors.  Returns false iff
     *  the traversal is to terminate immediately. */
    protected boolean postVisit(int v) {
        return true;
    }

    /** Return true if we should schedule successors of V in reverse order. */
    protected boolean reverseSuccessors(int v) {
        return false;
    }

    /** Process successor V to U.  Returns true iff V is then to
     *  be added to the fringe.  By default, returns true iff V is unmarked. */
    protected boolean processSuccessor(int u, int v) {
        return !marked(v);
    }

    /** The graph being traversed. */
    private final Graph _G;
    /** The fringe. */
    protected final Queue<Integer> _fringe;
    // FIXME
    private ArrayList<Integer> _visited;//a list of processed vertices.
    //a "marked" vertex is a vertex that has been "visited" (processed)

    //private HashSet<Integer> visited;
    //private HashSet<Integer> postVisited;

}
